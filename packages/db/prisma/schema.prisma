// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// New Profile model mapping to public.profiles
model Profile {
  id                  String    @id @db.Uuid @map("id")
  firstName           String?   @map("first_name")
  lastName            String?   @map("last_name")
  avatarUrl           String?   @map("avatar_url")
  stripeCustomerId    String?   @map("stripe_customer_id")
  subscriptionStatus  String    @default("trial") @map("subscription_status")
  trialStartTs        DateTime? @map("trial_start_ts") @db.Timestamptz(6)
  updatedAt           DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relationships to other tables that now reference profiles
  memberships         Membership[]
  leads               Lead[]
  leadClaims          LeadClaim[]
  leadNotes           LeadNote[]
  auditLogs           AuditLog[]

  @@map("profiles")
}

// Existing models, updated to reference Profile where applicable
model Lead {
  id          String      @id @default(cuid())
  source      String
  title       String
  summary     String?
  rawUrl      String      @unique
  author      String?
  company     String?
  location    String?
  budget      String?
  techStack   String[]    @default([]) @db.Text
  createdAt   DateTime    @default(now())
  discoveredAt DateTime   @default(now())
  score       Float       @default(0.0)
  status      String      @default("new")
  userId      String?     @db.Uuid // Changed to UUID
  orgId       String?

  // Relationship to Profile
  user        Profile?    @relation(fields: [userId], references: [id])

  leadEnrichments LeadEnrichment[]
  leadScores      LeadScore[]
  leadClaims      LeadClaim[]
  leadContacts    LeadContact[]
  leadNotes       LeadNote[]

  @@map("lead")
}

model LeadEnrichment {
  id        String    @id @default(cuid())
  leadId    String
  provider  String
  data      Json
  createdAt DateTime  @default(now())

  lead      Lead      @relation(fields: [leadId], references: [id])

  @@map("leadenrichment")
}

model LeadScore {
  id        String    @id @default(cuid())
  leadId    String
  ruleScore Float
  mlScore   Float
  finalScore Float
  version   String    @default("v1")
  createdAt DateTime  @default(now())

  lead      Lead      @relation(fields: [leadId], references: [id])

  @@map("leadscore")
}

model LeadClaim {
  id        String    @id @default(cuid())
  leadId    String
  userId    String    @db.Uuid // Changed to UUID
  claimedAt DateTime  @default(now())

  lead      Lead      @relation(fields: [leadId], references: [id])
  user      Profile   @relation(fields: [userId], references: [id]) // Relationship to Profile

  @@map("leadclaim")
}

model LeadContact {
  id         String    @id @default(cuid())
  leadId     String
  type       String
  value      String
  confidence Float     @default(0.0)
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())

  lead       Lead      @relation(fields: [leadId], references: [id])

  @@map("leadcontact")
}

model LeadNote {
  id        String    @id @default(cuid())
  leadId    String
  userId    String    @db.Uuid // Changed to UUID
  content   String
  createdAt DateTime  @default(now())

  lead      Lead      @relation(fields: [leadId], references: [id])
  user      Profile   @relation(fields: [userId], references: [id]) // Relationship to Profile

  @@map("leadnote")
}

model Webhook {
  id          String           @id @default(cuid())
  orgId       String
  event       String
  url         String
  secret      String
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  webhookDeliveries WebhookDelivery[]

  @@map("webhook")
}

model WebhookDelivery {
  id            String           @id @default(cuid())
  webhookId     String
  payload       Json
  status        String
  statusCode    Int?
  response      String?
  attempts      Int              @default(0)
  lastAttemptAt DateTime         @default(now())

  webhook       Webhook          @relation(fields: [webhookId], references: [id])
  webhookAttempts WebhookAttempt[]

  @@map("webhookdelivery")
}

model WebhookAttempt {
  id          String    @id @default(cuid())
  deliveryId  String
  attemptNumber Int
  statusCode  Int?
  response    String?
  attemptedAt DateTime  @default(now())

  webhookDelivery WebhookDelivery @relation(fields: [deliveryId], references: [id])

  @@map("webhookattempt")
}

model Org {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  memberships Membership[]
  leads       Lead[]       @relation("OrgLeads")
  auditLogs   AuditLog[]
  webhooks    Webhook[]

  @@map("org")
}

model Membership {
  id          String    @id @default(cuid())
  userId      String    @db.Uuid // Changed to UUID
  orgId       String
  role        String    @default("viewer")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        Profile   @relation(fields: [userId], references: [id]) // Relationship to Profile
  org         Org       @relation(fields: [orgId], references: [id])

  @@map("membership")
}

model AuditLog {
  id          String    @id @default(cuid())
  orgId       String?
  userId      String?   @db.Uuid // Changed to UUID
  action      String
  entityType  String
  entityId    String
  payload     Json
  ipAddress   String?
  createdAt   DateTime  @default(now())

  user        Profile?  @relation(fields: [userId], references: [id]) // Relationship to Profile
  org         Org?      @relation(fields: [orgId], references: [id])

  @@map("auditlog")
}

model Keyword {
  id          String    @id @default(cuid())
  createdAt   DateTime? @default(now())
  keyword     String
  volume      Int?      @default(0)
  difficulty  Int?      @default(0)
  intent      String?   @default("informational")
  status      String?   @default("active")

  @@map("keywords")
}

model Backlink {
  id            String    @id @default(cuid())
  createdAt     DateTime? @default(now())
  url           String
  domain        String
  domainAuthority Int?    @default(0) @map("domain_authority")
  status        String?   @default("pending")
  anchorText    String?   @map("anchor_text")
  platform      String?   @default("custom")

  @@map("backlinks")
}

model SeoMetric {
  id            String    @id @default(cuid())
  createdAt     DateTime? @default(now())
  indexedPages  Int?      @default(0) @map("indexed_pages")
  rankings      Int?      @default(0)
  backlinks     Int?      @default(0)
  traffic       Int?      @default(0)
  updatedAt     DateTime? @default(now()) @map("updated_at")

  @@map("seo_metrics")
}